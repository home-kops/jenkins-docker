name: Build docker image

on:
  push:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Store condition to decide if we should build
      id: check-build
      run: |
        commit_message="$(git log -1 --pretty=%B | head -n1)"
        should_build="$(grep -E "^\[build\].*" <<< "${commit_message}" || true)"

        if [[ -z "${should_build}" ]]; then
          co_author="$(git log --format="%(trailers:key=Co-authored-by)")"
          should_build="$(grep "Renovate Bot" <<< "${co_author}" || true)"
        fi

        if [[ "${should_build}" ]]; then
          echo "build=true" >> ${GITHUB_OUTPUT}
        else
          echo "build=false" >> ${GITHUB_OUTPUT}
        fi

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: steps.check-build.outputs.build == 'true'
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      if: steps.check-build.outputs.build == 'true'
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      if: steps.check-build.outputs.build == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Get the last tag
      if: steps.check-build.outputs.build == 'true'
      id: create-tag
      run: |
        last_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
        tag="$(awk -F. '/[0-9]+\./{$NF+=1;print}' OFS=. <<< "${last_tag}")"

        echo "tag=${tag}" >> ${GITHUB_OUTPUT}

    - name: Build and push
      if: steps.check-build.outputs.build == 'true'
      uses: docker/build-push-action@v6
      with:
        platforms: linux/amd64
        context: .
        push: true
        tags: |
          ${{ vars.DOCKERHUB_USERNAME }}/jenkins:${{ steps.create-tag.outputs.tag }}
          ${{ vars.DOCKERHUB_USERNAME }}/jenkins:latest

    - name: Tag the commit
      if: steps.check-build.outputs.build == 'true'
      run: |
        git tag ${{ steps.create-tag.outputs.tag }}
        git push origin ${{ steps.create-tag.outputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
